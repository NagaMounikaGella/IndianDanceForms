@model IndianDanceForms.Models.DanceFormsDetail

@{
    ViewBag.Title = "Edit";
    Layout = null;
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/css/font-awesome.css" rel="stylesheet" />
    <link href="~/Content/myStyle.css" rel="stylesheet" />
    <link href="~/Content/images/favicon/favicon.ico" rel="shortcut icon" />
    <link href="~/Content/images/favicon/favicon.ico" rel="icon" />
    @{ string modelName = @Html.ValueFor(dF => dF.Name).ToString(); }
    <title>Edit- @modelName</title>
    <style>
        .grayBackground{
            background-color: dimgray;
            margin: 20px;
            margin-left: 40px;
            padding: 30px;
            border-radius: 10px;
        }
        
        .imageStyle{
            border: 2px solid;
            border-radius: 20px;
            border-color: yellow;
        }

        .videoStyle{
            border: 2px solid;
            border-color: yellow;
        }

        select{
            background-color: yellow ;
            color: blueviolet;
        }

        .textColor{
            color: yellow;
        }
        .mainHeading{
              font-size: 84px;
              background: -webkit-linear-gradient(gray,rgba(255,255,255,1), yellow);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
        }

    </style>
</head>
<body>
    @using (Html.BeginForm())
    {
        <header>
            <div class="myDivHeading">
                <h1 class="tm-section-header text-center mainHeading text-uppercase">Indian Dance Forms</h1>
            </div>
        </header>
        <div class="grayBackground">
            <h2 class="tm-section-header yellow-text text-center text-capitalize">Edit Dance Form - @modelName </h2>
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.Label("Name", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(dF => dF.Name, "", new { @class = "textColor" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Description", new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.TextAreaFor(dF => dF.Description, new { rows = "10", @class = "form-control" })
                        @Html.ValidationMessageFor(dF => dF.Description, "", new { @class = "textColor" })
                        
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Dance Form Type", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @{ string modelDanceFormType = @Html.ValueFor(dF => dF.DanceFormType).ToString(); }
                        @modelDanceFormType
                        <br />
                        @{
                            List<SelectListItem> listItems = new List<SelectListItem>();
                            listItems.Add(new SelectListItem
                            {
                                Text = "Classical",
                                Value = "Classical"
                            });
                            listItems.Add(new SelectListItem
                            {
                                Text = "Folk",
                                Value = "Folk"
                            });
                        }

                        @Html.DropDownListFor(dF => dF.DanceFormType, listItems, "-- Select Dance Form Type --", new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(dF => dF.DanceFormType, "", new { @class = "textColor" })

                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Origin", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.Origin, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(dF => dF.Origin, "", new { @class = "textColor" })

                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Likes", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.LikesNo, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("DisLikes", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.DisLikesNo, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Picture Url", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.PictureUrl, new { htmlAttributes = new { @class = "form-control" } })
                        <br />
                        <div class="text-center">
                            <h4 class="yellow-text text-capitalize">Picture</h4>
                            @{ string modelPictureUrl = @Html.ValueFor(dF => dF.PictureUrl).ToString();}
                            
                                @if (string.IsNullOrEmpty(modelPictureUrl))
                                {
                                    <img src=@Url.Content("~/Content/images/default.jpg") alt="Image" class="img-fluid imageStyle" height="240px" width="320px">
                                }
                                else
                                {
                                    <img src=@Url.Content(modelPictureUrl) alt="Image" class="img-fluid imageStyle" height="240px" width="320px">
                                }
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Video Url", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.VideoUrl, new { htmlAttributes = new { @class = "form-control" } })
                        <br />
                        <div class="text-center">
                            <h4 class="yellow-text text-capitalize">Video</h4>
                            @{ string modelVideoUrl = @Html.ValueFor(dF => dF.VideoUrl).ToString();}
                            
                            @if (string.IsNullOrEmpty(modelVideoUrl))
                            {
                            <iframe width="320"
                                    height="240"
                                    src=@Url.Content("https://youtube.com/embed/yGvlACb9gXw?rel=0")
                                    frameborder="0"
                                    allowfullscreen class="videoStyle"></iframe>
                            }
                            else
                            {
                            <iframe width="320"
                                    height="240"
                                    src=@Url.Content(modelVideoUrl + "?rel=0")
                                    frameborder="0"
                                    allowfullscreen class="videoStyle"></iframe>
                            }
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Wiki Url", htmlAttributes: new { @class = "control-label col-xs-2 col-sm-2 col-md-2 col-lg-2 col-xl-2" })
                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10 col-xl-10">
                        @Html.EditorFor(dF => dF.WikiUrl, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                @{ string modelId = @Html.ValueFor(dF => dF.Id).ToString();
                    string modelDescription = @Html.ValueFor(dF => dF.Description).ToString();
                    string modelOrigin = @Html.ValueFor(dF => dF.Origin).ToString();
                    string modelLikesNo = @Html.ValueFor(dF => dF.LikesNo).ToString();
                    string modelDisLikesNo = @Html.ValueFor(dF => dF.DisLikesNo).ToString();
                    string modelWikiUrl = @Html.ValueFor(dF => dF.WikiUrl).ToString(); }

                @if (Model != null)
                {
                    if (string.IsNullOrEmpty(modelDescription))
                    {
                        Model.Description = "This is one of the numerous styles of dances, generally classified as classical or folk in India. As with other aspects of Indian culture, different forms of dances originated in different parts of India, developed according to the local traditions and also imbibed elements from other parts of the country.";
                    }
                    if (string.IsNullOrEmpty(modelOrigin))
                    {
                        Model.Origin = "An Indian State";
                    }
                    if (string.IsNullOrEmpty(modelLikesNo))
                    {
                        Model.LikesNo = 0;
                    }
                    if (string.IsNullOrEmpty(modelDisLikesNo))
                    {
                        Model.DisLikesNo = 0;
                    }
                    if (string.IsNullOrEmpty(modelPictureUrl))
                    {
                        Model.PictureUrl = "~/Content/images/default.jpg";
                    }
                    if (string.IsNullOrEmpty(modelVideoUrl))
                    {
                        Model.VideoUrl = "https://youtube.com/embed/yGvlACb9gXw";
                    }
                    if (string.IsNullOrEmpty(modelWikiUrl))
                    {
                        Model.WikiUrl = "https://en.wikipedia.org/wiki/Dance_in_India";
                    }
                }

                <div class="form-group">
                    <div class="text-center">
                        @Html.ActionLink(" Back to Home", "Index", null , new { @class = "btn-lg btn-primary fa fa-home" })
                        <button type="submit" class="btn btn-success">
                            <i class="fa fa-floppy-o"></i> Save
                        </button>
                        @if (!string.IsNullOrEmpty(modelId))
                        {
                        @Html.ActionLink(" Reset", "Edit", new { modelId }, new { @class = "btn-lg btn-primary fa fa-undo" })
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</body>
</html>



